// Code generated by github.com/varlink/go/cmd/varlink-go-interface-generator, DO NOT EDIT.

package comredhatrhsmconsumer

import (
	"context"
	"github.com/varlink/go/varlink"
)

// Generated type declarations

func Dispatch_Error(err error) error {
	if e, ok := err.(*varlink.Error); ok {
		switch e.Name {
		}
	}
	return err
}

// Generated client method calls

type GetUUID_methods struct{}

func GetUUID() GetUUID_methods { return GetUUID_methods{} }

func (m GetUUID_methods) Call(ctx context.Context, c *varlink.Connection, locale_in_ string) (uuid_out_ string, err_ error) {
	receive, err_ := m.Send(ctx, c, 0, locale_in_)
	if err_ != nil {
		return
	}
	uuid_out_, _, err_ = receive(ctx)
	return
}

func (m GetUUID_methods) Send(ctx context.Context, c *varlink.Connection, flags uint64, locale_in_ string) (func(ctx context.Context) (string, uint64, error), error) {
	var in struct {
		Locale string `json:"locale"`
	}
	in.Locale = locale_in_
	receive, err := c.Send(ctx, "com.redhat.rhsm.consumer.GetUUID", in, flags)
	if err != nil {
		return nil, err
	}
	return func(context.Context) (uuid_out_ string, flags uint64, err error) {
		var out struct {
			Uuid string `json:"uuid"`
		}
		flags, err = receive(ctx, &out)
		if err != nil {
			err = Dispatch_Error(err)
			return
		}
		uuid_out_ = out.Uuid
		return
	}, nil
}

func (m GetUUID_methods) Upgrade(ctx context.Context, c *varlink.Connection, locale_in_ string) (func(ctx context.Context) (uuid_out_ string, flags uint64, conn varlink.ReadWriterContext, err_ error), error) {
	var in struct {
		Locale string `json:"locale"`
	}
	in.Locale = locale_in_
	receive, err := c.Upgrade(ctx, "com.redhat.rhsm.consumer.GetUUID", in)
	if err != nil {
		return nil, err
	}
	return func(context.Context) (uuid_out_ string, flags uint64, conn varlink.ReadWriterContext, err error) {
		var out struct {
			Uuid string `json:"uuid"`
		}
		flags, conn, err = receive(ctx, &out)
		if err != nil {
			err = Dispatch_Error(err)
			return
		}
		uuid_out_ = out.Uuid
		return
	}, nil
}

type GetOrg_methods struct{}

func GetOrg() GetOrg_methods { return GetOrg_methods{} }

func (m GetOrg_methods) Call(ctx context.Context, c *varlink.Connection, locale_in_ string) (org_out_ string, err_ error) {
	receive, err_ := m.Send(ctx, c, 0, locale_in_)
	if err_ != nil {
		return
	}
	org_out_, _, err_ = receive(ctx)
	return
}

func (m GetOrg_methods) Send(ctx context.Context, c *varlink.Connection, flags uint64, locale_in_ string) (func(ctx context.Context) (string, uint64, error), error) {
	var in struct {
		Locale string `json:"locale"`
	}
	in.Locale = locale_in_
	receive, err := c.Send(ctx, "com.redhat.rhsm.consumer.GetOrg", in, flags)
	if err != nil {
		return nil, err
	}
	return func(context.Context) (org_out_ string, flags uint64, err error) {
		var out struct {
			Org string `json:"org"`
		}
		flags, err = receive(ctx, &out)
		if err != nil {
			err = Dispatch_Error(err)
			return
		}
		org_out_ = out.Org
		return
	}, nil
}

func (m GetOrg_methods) Upgrade(ctx context.Context, c *varlink.Connection, locale_in_ string) (func(ctx context.Context) (org_out_ string, flags uint64, conn varlink.ReadWriterContext, err_ error), error) {
	var in struct {
		Locale string `json:"locale"`
	}
	in.Locale = locale_in_
	receive, err := c.Upgrade(ctx, "com.redhat.rhsm.consumer.GetOrg", in)
	if err != nil {
		return nil, err
	}
	return func(context.Context) (org_out_ string, flags uint64, conn varlink.ReadWriterContext, err error) {
		var out struct {
			Org string `json:"org"`
		}
		flags, conn, err = receive(ctx, &out)
		if err != nil {
			err = Dispatch_Error(err)
			return
		}
		org_out_ = out.Org
		return
	}, nil
}

// Generated service interface with all methods

type comredhatrhsmconsumerInterface interface {
	GetUUID(ctx context.Context, c VarlinkCall, locale_ string) error
	GetOrg(ctx context.Context, c VarlinkCall, locale_ string) error
}

// Generated service object with all methods

type VarlinkCall struct{ varlink.Call }

// Generated reply methods for all varlink errors

// Generated reply methods for all varlink methods

func (c *VarlinkCall) ReplyGetUUID(ctx context.Context, uuid_ string) error {
	var out struct {
		Uuid string `json:"uuid"`
	}
	out.Uuid = uuid_
	return c.Reply(ctx, &out)
}

func (c *VarlinkCall) ReplyGetOrg(ctx context.Context, org_ string) error {
	var out struct {
		Org string `json:"org"`
	}
	out.Org = org_
	return c.Reply(ctx, &out)
}

// Generated dummy implementations for all varlink methods

func (s *VarlinkInterface) GetUUID(ctx context.Context, c VarlinkCall, locale_ string) error {
	return c.ReplyMethodNotImplemented(ctx, "com.redhat.rhsm.consumer.GetUUID")
}

func (s *VarlinkInterface) GetOrg(ctx context.Context, c VarlinkCall, locale_ string) error {
	return c.ReplyMethodNotImplemented(ctx, "com.redhat.rhsm.consumer.GetOrg")
}

// Generated method call dispatcher

func (s *VarlinkInterface) VarlinkDispatch(ctx context.Context, call varlink.Call, methodname string) error {
	switch methodname {
	case "GetUUID":
		var in struct {
			Locale string `json:"locale"`
		}
		err := call.GetParameters(&in)
		if err != nil {
			return call.ReplyInvalidParameter(ctx, "parameters")
		}
		return s.comredhatrhsmconsumerInterface.GetUUID(ctx, VarlinkCall{call}, in.Locale)

	case "GetOrg":
		var in struct {
			Locale string `json:"locale"`
		}
		err := call.GetParameters(&in)
		if err != nil {
			return call.ReplyInvalidParameter(ctx, "parameters")
		}
		return s.comredhatrhsmconsumerInterface.GetOrg(ctx, VarlinkCall{call}, in.Locale)

	default:
		return call.ReplyMethodNotFound(ctx, methodname)
	}
}

// Generated varlink interface name

func (s *VarlinkInterface) VarlinkGetName() string {
	return `com.redhat.rhsm.consumer`
}

// Generated varlink interface description

func (s *VarlinkInterface) VarlinkGetDescription() string {
	return `interface com.redhat.rhsm.consumer

method GetUUID(locale: string) -> (
    uuid: string
)

method GetOrg(locale: string) -> (
    org: string
)
`
}

// Generated service interface

type VarlinkInterface struct {
	comredhatrhsmconsumerInterface
}

func VarlinkNew(m comredhatrhsmconsumerInterface) *VarlinkInterface {
	return &VarlinkInterface{m}
}
